{"ast":null,"code":"import _objectSpread from\"D:/JHFshop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{collection,getDocs,addDoc,deleteDoc,doc,updateDoc,writeBatch}from\"firebase/firestore\";import{db}from\"../lib/firebase\";import{USERS_COLLECTION,USER_ADDRESSES_SUB}from\"../lib/collections\";import{stripUndefined}from\"../lib/firestore-utils\";export async function listAddresses(uid){const col=collection(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB);const snap=await getDocs(col);return snap.docs.map(d=>_objectSpread({id:d.id},d.data()));}export async function addAddress(uid,address){const col=collection(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB);const ref=await addDoc(col,stripUndefined(address));return _objectSpread(_objectSpread({},address),{},{id:ref.id});}export async function deleteAddress(uid,addressId){await deleteDoc(doc(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB,addressId));}export async function updateAddress(uid,addressId,partial){await updateDoc(doc(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB,addressId),stripUndefined(partial));}export async function setDefaultAddress(uid,addressId){const col=collection(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB);const snap=await getDocs(col);const batch=writeBatch(db);snap.docs.forEach(d=>{const target=doc(db,USERS_COLLECTION,uid,USER_ADDRESSES_SUB,d.id);const makeDefault=d.id===addressId;batch.update(target,{isDefault:makeDefault});});await batch.commit();}","map":{"version":3,"names":["collection","getDocs","addDoc","deleteDoc","doc","updateDoc","writeBatch","db","USERS_COLLECTION","USER_ADDRESSES_SUB","stripUndefined","listAddresses","uid","col","snap","docs","map","d","_objectSpread","id","data","addAddress","address","ref","deleteAddress","addressId","updateAddress","partial","setDefaultAddress","batch","forEach","target","makeDefault","update","isDefault","commit"],"sources":["D:/JHFshop/src/services/addresses.ts"],"sourcesContent":["import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc, writeBatch } from \"firebase/firestore\";\nimport { db } from \"../lib/firebase\";\nimport { USERS_COLLECTION, USER_ADDRESSES_SUB } from \"../lib/collections\";\nimport { stripUndefined } from \"../lib/firestore-utils\";\n\nexport type Address = {\n  id?: string;\n  name: string;\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  phone?: string;\n  isDefault: boolean;\n};\n\nexport async function listAddresses(uid: string): Promise<Address[]> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  return snap.docs.map(d => ({ id: d.id, ...(d.data() as Omit<Address, \"id\">) }));\n}\n\nexport async function addAddress(uid: string, address: Address): Promise<Address | null> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const ref = await addDoc(col, stripUndefined(address));\n  return { ...address, id: ref.id };\n}\n\nexport async function deleteAddress(uid: string, addressId: string): Promise<void> {\n  await deleteDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId));\n}\n\nexport async function updateAddress(uid: string, addressId: string, partial: Partial<Address>): Promise<void> {\n  await updateDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId), stripUndefined(partial) as any);\n}\n\nexport async function setDefaultAddress(uid: string, addressId: string): Promise<void> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  const batch = writeBatch(db);\n  snap.docs.forEach(d => {\n    const target = doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, d.id);\n    const makeDefault = d.id === addressId;\n    batch.update(target, { isDefault: makeDefault });\n  });\n  await batch.commit();\n}\n"],"mappings":"+FAAA,OAASA,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAEC,SAAS,CAAEC,GAAG,CAAEC,SAAS,CAAEC,UAAU,KAAQ,oBAAoB,CACvG,OAASC,EAAE,KAAQ,iBAAiB,CACpC,OAASC,gBAAgB,CAAEC,kBAAkB,KAAQ,oBAAoB,CACzE,OAASC,cAAc,KAAQ,wBAAwB,CAcvD,MAAO,eAAe,CAAAC,aAAaA,CAACC,GAAW,CAAsB,CACnE,KAAM,CAAAC,GAAG,CAAGb,UAAU,CAACO,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAC,CACrE,KAAM,CAAAK,IAAI,CAAG,KAAM,CAAAb,OAAO,CAACY,GAAG,CAAC,CAC/B,MAAO,CAAAC,IAAI,CAACC,IAAI,CAACC,GAAG,CAACC,CAAC,EAAAC,aAAA,EAAOC,EAAE,CAAEF,CAAC,CAACE,EAAE,EAAMF,CAAC,CAACG,IAAI,CAAC,CAAC,CAA2B,CAAC,CACjF,CAEA,MAAO,eAAe,CAAAC,UAAUA,CAACT,GAAW,CAAEU,OAAgB,CAA2B,CACvF,KAAM,CAAAT,GAAG,CAAGb,UAAU,CAACO,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAC,CACrE,KAAM,CAAAc,GAAG,CAAG,KAAM,CAAArB,MAAM,CAACW,GAAG,CAAEH,cAAc,CAACY,OAAO,CAAC,CAAC,CACtD,OAAAJ,aAAA,CAAAA,aAAA,IAAYI,OAAO,MAAEH,EAAE,CAAEI,GAAG,CAACJ,EAAE,GACjC,CAEA,MAAO,eAAe,CAAAK,aAAaA,CAACZ,GAAW,CAAEa,SAAiB,CAAiB,CACjF,KAAM,CAAAtB,SAAS,CAACC,GAAG,CAACG,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAEgB,SAAS,CAAC,CAAC,CAChF,CAEA,MAAO,eAAe,CAAAC,aAAaA,CAACd,GAAW,CAAEa,SAAiB,CAAEE,OAAyB,CAAiB,CAC5G,KAAM,CAAAtB,SAAS,CAACD,GAAG,CAACG,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAEgB,SAAS,CAAC,CAAEf,cAAc,CAACiB,OAAO,CAAQ,CAAC,CAChH,CAEA,MAAO,eAAe,CAAAC,iBAAiBA,CAAChB,GAAW,CAAEa,SAAiB,CAAiB,CACrF,KAAM,CAAAZ,GAAG,CAAGb,UAAU,CAACO,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAC,CACrE,KAAM,CAAAK,IAAI,CAAG,KAAM,CAAAb,OAAO,CAACY,GAAG,CAAC,CAC/B,KAAM,CAAAgB,KAAK,CAAGvB,UAAU,CAACC,EAAE,CAAC,CAC5BO,IAAI,CAACC,IAAI,CAACe,OAAO,CAACb,CAAC,EAAI,CACrB,KAAM,CAAAc,MAAM,CAAG3B,GAAG,CAACG,EAAE,CAAEC,gBAAgB,CAAEI,GAAG,CAAEH,kBAAkB,CAAEQ,CAAC,CAACE,EAAE,CAAC,CACvE,KAAM,CAAAa,WAAW,CAAGf,CAAC,CAACE,EAAE,GAAKM,SAAS,CACtCI,KAAK,CAACI,MAAM,CAACF,MAAM,CAAE,CAAEG,SAAS,CAAEF,WAAY,CAAC,CAAC,CAClD,CAAC,CAAC,CACF,KAAM,CAAAH,KAAK,CAACM,MAAM,CAAC,CAAC,CACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}