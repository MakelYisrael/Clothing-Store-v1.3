{"ast":null,"code":"import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc, writeBatch } from \"firebase/firestore\";\nimport { db } from \"../lib/firebase\";\nimport { USERS_COLLECTION, USER_ADDRESSES_SUB } from \"../lib/collections\";\nimport { stripUndefined } from \"../lib/firestore-utils\";\nexport async function listAddresses(uid) {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  return snap.docs.map(d => ({\n    id: d.id,\n    ...d.data()\n  }));\n}\nexport async function addAddress(uid, address) {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const ref = await addDoc(col, stripUndefined(address));\n  return {\n    ...address,\n    id: ref.id\n  };\n}\nexport async function deleteAddress(uid, addressId) {\n  await deleteDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId));\n}\nexport async function updateAddress(uid, addressId, partial) {\n  await updateDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId), stripUndefined(partial));\n}\nexport async function setDefaultAddress(uid, addressId) {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  const batch = writeBatch(db);\n  snap.docs.forEach(d => {\n    const target = doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, d.id);\n    const makeDefault = d.id === addressId;\n    batch.update(target, {\n      isDefault: makeDefault\n    });\n  });\n  await batch.commit();\n}","map":{"version":3,"names":["collection","getDocs","addDoc","deleteDoc","doc","updateDoc","writeBatch","db","USERS_COLLECTION","USER_ADDRESSES_SUB","stripUndefined","listAddresses","uid","col","snap","docs","map","d","id","data","addAddress","address","ref","deleteAddress","addressId","updateAddress","partial","setDefaultAddress","batch","forEach","target","makeDefault","update","isDefault","commit"],"sources":["D:/JHFshop/src/services/addresses.ts"],"sourcesContent":["import { collection, getDocs, addDoc, deleteDoc, doc, updateDoc, writeBatch } from \"firebase/firestore\";\nimport { db } from \"../lib/firebase\";\nimport { USERS_COLLECTION, USER_ADDRESSES_SUB } from \"../lib/collections\";\nimport { stripUndefined } from \"../lib/firestore-utils\";\n\nexport type Address = {\n  id?: string;\n  name: string;\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  phone?: string;\n  isDefault: boolean;\n};\n\nexport async function listAddresses(uid: string): Promise<Address[]> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  return snap.docs.map(d => ({ id: d.id, ...(d.data() as Omit<Address, \"id\">) }));\n}\n\nexport async function addAddress(uid: string, address: Address): Promise<Address | null> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const ref = await addDoc(col, stripUndefined(address));\n  return { ...address, id: ref.id };\n}\n\nexport async function deleteAddress(uid: string, addressId: string): Promise<void> {\n  await deleteDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId));\n}\n\nexport async function updateAddress(uid: string, addressId: string, partial: Partial<Address>): Promise<void> {\n  await updateDoc(doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, addressId), stripUndefined(partial) as any);\n}\n\nexport async function setDefaultAddress(uid: string, addressId: string): Promise<void> {\n  const col = collection(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB);\n  const snap = await getDocs(col);\n  const batch = writeBatch(db);\n  snap.docs.forEach(d => {\n    const target = doc(db, USERS_COLLECTION, uid, USER_ADDRESSES_SUB, d.id);\n    const makeDefault = d.id === addressId;\n    batch.update(target, { isDefault: makeDefault });\n  });\n  await batch.commit();\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,GAAG,EAAEC,SAAS,EAAEC,UAAU,QAAQ,oBAAoB;AACvG,SAASC,EAAE,QAAQ,iBAAiB;AACpC,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,oBAAoB;AACzE,SAASC,cAAc,QAAQ,wBAAwB;AAcvD,OAAO,eAAeC,aAAaA,CAACC,GAAW,EAAsB;EACnE,MAAMC,GAAG,GAAGb,UAAU,CAACO,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,CAAC;EACrE,MAAMK,IAAI,GAAG,MAAMb,OAAO,CAACY,GAAG,CAAC;EAC/B,OAAOC,IAAI,CAACC,IAAI,CAACC,GAAG,CAACC,CAAC,KAAK;IAAEC,EAAE,EAAED,CAAC,CAACC,EAAE;IAAE,GAAID,CAAC,CAACE,IAAI,CAAC;EAA0B,CAAC,CAAC,CAAC;AACjF;AAEA,OAAO,eAAeC,UAAUA,CAACR,GAAW,EAAES,OAAgB,EAA2B;EACvF,MAAMR,GAAG,GAAGb,UAAU,CAACO,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,CAAC;EACrE,MAAMa,GAAG,GAAG,MAAMpB,MAAM,CAACW,GAAG,EAAEH,cAAc,CAACW,OAAO,CAAC,CAAC;EACtD,OAAO;IAAE,GAAGA,OAAO;IAAEH,EAAE,EAAEI,GAAG,CAACJ;EAAG,CAAC;AACnC;AAEA,OAAO,eAAeK,aAAaA,CAACX,GAAW,EAAEY,SAAiB,EAAiB;EACjF,MAAMrB,SAAS,CAACC,GAAG,CAACG,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,EAAEe,SAAS,CAAC,CAAC;AAChF;AAEA,OAAO,eAAeC,aAAaA,CAACb,GAAW,EAAEY,SAAiB,EAAEE,OAAyB,EAAiB;EAC5G,MAAMrB,SAAS,CAACD,GAAG,CAACG,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,EAAEe,SAAS,CAAC,EAAEd,cAAc,CAACgB,OAAO,CAAQ,CAAC;AAChH;AAEA,OAAO,eAAeC,iBAAiBA,CAACf,GAAW,EAAEY,SAAiB,EAAiB;EACrF,MAAMX,GAAG,GAAGb,UAAU,CAACO,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,CAAC;EACrE,MAAMK,IAAI,GAAG,MAAMb,OAAO,CAACY,GAAG,CAAC;EAC/B,MAAMe,KAAK,GAAGtB,UAAU,CAACC,EAAE,CAAC;EAC5BO,IAAI,CAACC,IAAI,CAACc,OAAO,CAACZ,CAAC,IAAI;IACrB,MAAMa,MAAM,GAAG1B,GAAG,CAACG,EAAE,EAAEC,gBAAgB,EAAEI,GAAG,EAAEH,kBAAkB,EAAEQ,CAAC,CAACC,EAAE,CAAC;IACvE,MAAMa,WAAW,GAAGd,CAAC,CAACC,EAAE,KAAKM,SAAS;IACtCI,KAAK,CAACI,MAAM,CAACF,MAAM,EAAE;MAAEG,SAAS,EAAEF;IAAY,CAAC,CAAC;EAClD,CAAC,CAAC;EACF,MAAMH,KAAK,CAACM,MAAM,CAAC,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}