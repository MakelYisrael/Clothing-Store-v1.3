{"ast":null,"code":"var _jsxFileName = \"D:\\\\JHFshop\\\\src\\\\contexts\\\\user-context.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState, createContext, useContext } from \"react\";\nimport { auth, db } from \"../lib/firebase\";\nimport { USERS_COLLECTION, USER_ORDERS_SUB } from \"../lib/collections\";\nimport { clearOldUserData } from \"../services/userData\";\nimport { stripUndefined } from \"../lib/firestore-utils\";\nimport { onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, updateProfile, GoogleAuthProvider, signInWithPopup, signInWithRedirect, linkWithPopup, linkWithCredential, fetchSignInMethodsForEmail } from \"firebase/auth\";\nimport { doc, setDoc, getDoc, collection, getDocs, addDoc, serverTimestamp, query, orderBy } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet pendingAccountLink = null;\nconst UserContext = /*#__PURE__*/createContext(undefined);\nexport function UserProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [orders, setOrders] = useState([]);\n\n  // using shared stripUndefined utility for Firestore writes\n\n  useEffect(() => {\n    const unsub = onAuthStateChanged(auth, async fbUser => {\n      if (fbUser) {\n        var _fbUser$photoURL;\n        const uid = fbUser.uid;\n        const profileRef = doc(db, USERS_COLLECTION, uid);\n        const snap = await getDoc(profileRef);\n        let profile = {\n          id: uid,\n          email: fbUser.email || \"\",\n          name: fbUser.displayName || \"\",\n          avatar: (_fbUser$photoURL = fbUser.photoURL) !== null && _fbUser$photoURL !== void 0 ? _fbUser$photoURL : null,\n          joinedDate: new Date().toISOString().split('T')[0],\n          isSeller: false\n        };\n        if (snap.exists()) {\n          const data = snap.data();\n          profile = {\n            ...profile,\n            ...data,\n            id: uid\n          };\n        } else {\n          await setDoc(profileRef, stripUndefined(profile), {\n            merge: true\n          });\n        }\n        try {\n          await clearOldUserData(uid);\n        } catch {}\n        setUser(profile);\n        const q = query(collection(db, USERS_COLLECTION, uid, USER_ORDERS_SUB), orderBy(\"createdAt\", \"desc\"));\n        const ordersSnap = await getDocs(q);\n        const loaded = ordersSnap.docs.map(d => ({\n          id: d.id,\n          ...d.data()\n        }));\n        setOrders(loaded);\n      } else {\n        setUser(null);\n        setOrders([]);\n      }\n    });\n    return () => unsub();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      var _auth$currentUser;\n      await signInWithEmailAndPassword(auth, email, password);\n      if (pendingAccountLink && ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email) === pendingAccountLink.email) {\n        try {\n          await linkWithCredential(auth.currentUser, pendingAccountLink.credential);\n        } catch {}\n        pendingAccountLink = null;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  };\n  const loginWithGoogle = async () => {\n    const provider = new GoogleAuthProvider();\n    provider.setCustomParameters({\n      prompt: 'select_account'\n    });\n    const inIframe = typeof window !== 'undefined' && window.self !== window.top;\n    try {\n      if (auth.currentUser) {\n        if (inIframe) {\n          await signInWithRedirect(auth, provider);\n          return {\n            ok: true\n          };\n        }\n        await linkWithPopup(auth.currentUser, provider);\n        return {\n          ok: true\n        };\n      }\n      if (inIframe) {\n        await signInWithRedirect(auth, provider);\n        return {\n          ok: true\n        };\n      }\n      await signInWithPopup(auth, provider);\n      return {\n        ok: true\n      };\n    } catch (e) {\n      const code = e === null || e === void 0 ? void 0 : e.code;\n      if (code === 'auth/popup-blocked' || code === 'auth/popup-closed-by-user') {\n        try {\n          await signInWithRedirect(auth, provider);\n          return {\n            ok: true\n          };\n        } catch (e2) {\n          return {\n            ok: false,\n            code: e2 === null || e2 === void 0 ? void 0 : e2.code,\n            message: e2 === null || e2 === void 0 ? void 0 : e2.message\n          };\n        }\n      }\n      if (code === 'auth/account-exists-with-different-credential') {\n        var _e$customData, _GoogleAuthProvider$c;\n        const email = e === null || e === void 0 ? void 0 : (_e$customData = e.customData) === null || _e$customData === void 0 ? void 0 : _e$customData.email;\n        const cred = (_GoogleAuthProvider$c = GoogleAuthProvider.credentialFromError) === null || _GoogleAuthProvider$c === void 0 ? void 0 : _GoogleAuthProvider$c.call(GoogleAuthProvider, e);\n        if (email && cred) {\n          pendingAccountLink = {\n            email,\n            credential: cred\n          };\n          try {\n            const methods = await fetchSignInMethodsForEmail(auth, email);\n            if (methods.includes('password')) {\n              return {\n                ok: false,\n                code: 'link-with-password',\n                message: 'Email already used. Sign in with your password to link Google.'\n              };\n            }\n            return {\n              ok: false,\n              code: 'link-with-' + (methods[0] || 'existing'),\n              message: 'Email already used. Sign in with your existing method to link.'\n            };\n          } catch {}\n        }\n      }\n      return {\n        ok: false,\n        code,\n        message: e === null || e === void 0 ? void 0 : e.message\n      };\n    }\n  };\n  const signup = async (email, password, name) => {\n    try {\n      const cred = await createUserWithEmailAndPassword(auth, email, password);\n      if (auth.currentUser) {\n        try {\n          await updateProfile(auth.currentUser, {\n            displayName: name\n          });\n        } catch {}\n      }\n      const profile = {\n        id: cred.user.uid,\n        email,\n        name,\n        avatar: null,\n        joinedDate: new Date().toISOString().split('T')[0],\n        isSeller: false\n      };\n      await setDoc(doc(db, USERS_COLLECTION, cred.user.uid), stripUndefined(profile), {\n        merge: true\n      });\n      try {\n        await clearOldUserData(cred.user.uid);\n      } catch {}\n      setUser(profile);\n      setOrders([]);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n  const logout = async () => {\n    await signOut(auth);\n    setUser(null);\n    setOrders([]);\n  };\n  const addOrder = async orderData => {\n    const newOrder = {\n      ...orderData,\n      id: `ORD-${Date.now()}`,\n      date: new Date().toISOString().split('T')[0]\n    };\n    setOrders(prev => [newOrder, ...prev]);\n    if (user) {\n      try {\n        await addDoc(collection(db, USERS_COLLECTION, user.id, USER_ORDERS_SUB), stripUndefined({\n          ...newOrder,\n          createdAt: serverTimestamp()\n        }));\n      } catch {}\n    }\n  };\n  const updateUserProfile = async updates => {\n    if (user) {\n      const next = {\n        ...user,\n        ...updates\n      };\n      setUser(next);\n      try {\n        await setDoc(doc(db, USERS_COLLECTION, user.id), stripUndefined(updates), {\n          merge: true\n        });\n      } catch {}\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      orders,\n      login,\n      loginWithGoogle,\n      signup,\n      logout,\n      addOrder,\n      updateUserProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(UserProvider, \"GSt/N5yiAAOVwTzxsvlZWsScv7M=\");\n_c = UserProvider;\nexport function useUser() {\n  _s2();\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n_s2(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["useEffect","useState","createContext","useContext","auth","db","USERS_COLLECTION","USER_ORDERS_SUB","clearOldUserData","stripUndefined","onAuthStateChanged","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","updateProfile","GoogleAuthProvider","signInWithPopup","signInWithRedirect","linkWithPopup","linkWithCredential","fetchSignInMethodsForEmail","doc","setDoc","getDoc","collection","getDocs","addDoc","serverTimestamp","query","orderBy","jsxDEV","_jsxDEV","pendingAccountLink","UserContext","undefined","UserProvider","children","_s","user","setUser","orders","setOrders","unsub","fbUser","_fbUser$photoURL","uid","profileRef","snap","profile","id","email","name","displayName","avatar","photoURL","joinedDate","Date","toISOString","split","isSeller","exists","data","merge","q","ordersSnap","loaded","docs","map","d","login","password","_auth$currentUser","currentUser","credential","loginWithGoogle","provider","setCustomParameters","prompt","inIframe","window","self","top","ok","e","code","e2","message","_e$customData","_GoogleAuthProvider$c","customData","cred","credentialFromError","call","methods","includes","signup","logout","addOrder","orderData","newOrder","now","date","prev","createdAt","updateUserProfile","updates","next","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","context","Error","$RefreshReg$"],"sources":["D:/JHFshop/src/contexts/user-context.tsx"],"sourcesContent":["import { useEffect, useState, createContext, useContext, ReactNode } from \"react\";\nimport { auth, db } from \"../lib/firebase\";\nimport { USERS_COLLECTION, USER_ORDERS_SUB } from \"../lib/collections\";\nimport { clearOldUserData } from \"../services/userData\";\nimport { stripUndefined } from \"../lib/firestore-utils\";\nimport {\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  GoogleAuthProvider,\n  signInWithPopup,\n  signInWithRedirect,\n  linkWithPopup,\n  linkWithCredential,\n  fetchSignInMethodsForEmail,\n  EmailAuthProvider,\n} from \"firebase/auth\";\nimport {\n  doc,\n  setDoc,\n  getDoc,\n  collection,\n  getDocs,\n  addDoc,\n  serverTimestamp,\n  query,\n  orderBy,\n} from \"firebase/firestore\";\n\nlet pendingAccountLink: { email: string; credential: any } | null = null;\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string | null;\n  joinedDate: string;\n  isSeller?: boolean;\n}\n\nexport interface Order {\n  id: string;\n  date: string;\n  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';\n  items: Array<{\n    id: string;\n    name: string;\n    price: number;\n    quantity: number;\n    image: string;\n  }>;\n  total: number;\n  shippingAddress: {\n    name?: string;\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  trackingNumber?: string;\n  carrier?: string;\n  estimatedDelivery?: string;\n}\n\ntype GoogleLoginResult = { ok: true } | { ok: false; code?: string; message?: string };\n\ninterface UserContextType {\n  user: User | null;\n  orders: Order[];\n  login: (email: string, password: string) => Promise<boolean>;\n  loginWithGoogle: () => Promise<GoogleLoginResult>;\n  signup: (email: string, password: string, name: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  addOrder: (order: Omit<Order, 'id' | 'date'>) => Promise<void>;\n  updateUserProfile: (updates: Partial<Pick<User, 'name' | 'email' | 'avatar'>>) => Promise<void>;\n}\n\nconst UserContext = createContext<UserContextType | undefined>(undefined);\n\nexport function UserProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [orders, setOrders] = useState<Order[]>([]);\n\n  // using shared stripUndefined utility for Firestore writes\n\n  useEffect(() => {\n    const unsub = onAuthStateChanged(auth, async (fbUser) => {\n      if (fbUser) {\n        const uid = fbUser.uid;\n        const profileRef = doc(db, USERS_COLLECTION, uid);\n        const snap = await getDoc(profileRef);\n        let profile: User = {\n          id: uid,\n          email: fbUser.email || \"\",\n          name: fbUser.displayName || \"\",\n          avatar: fbUser.photoURL ?? null,\n          joinedDate: new Date().toISOString().split('T')[0],\n          isSeller: false,\n        };\n        if (snap.exists()) {\n          const data = snap.data() as Partial<User>;\n          profile = { ...profile, ...data, id: uid } as User;\n        } else {\n          await setDoc(profileRef, stripUndefined(profile), { merge: true });\n        }\n        try { await clearOldUserData(uid); } catch {}\n        setUser(profile);\n        const q = query(collection(db, USERS_COLLECTION, uid, USER_ORDERS_SUB), orderBy(\"createdAt\", \"desc\"));\n        const ordersSnap = await getDocs(q);\n        const loaded: Order[] = ordersSnap.docs.map((d: any) => ({ id: d.id, ...(d.data() as any) }));\n        setOrders(loaded);\n      } else {\n        setUser(null);\n        setOrders([]);\n      }\n    });\n    return () => unsub();\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      if (pendingAccountLink && auth.currentUser?.email === pendingAccountLink.email) {\n        try {\n          await linkWithCredential(auth.currentUser!, pendingAccountLink.credential);\n        } catch {}\n        pendingAccountLink = null;\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const loginWithGoogle = async (): Promise<GoogleLoginResult> => {\n    const provider = new GoogleAuthProvider();\n    provider.setCustomParameters({ prompt: 'select_account' });\n    const inIframe = typeof window !== 'undefined' && window.self !== window.top;\n    try {\n      if (auth.currentUser) {\n        if (inIframe) {\n          await signInWithRedirect(auth, provider);\n          return { ok: true };\n        }\n        await linkWithPopup(auth.currentUser, provider);\n        return { ok: true };\n      }\n      if (inIframe) {\n        await signInWithRedirect(auth, provider);\n        return { ok: true };\n      }\n      await signInWithPopup(auth, provider);\n      return { ok: true };\n    } catch (e: any) {\n      const code = e?.code as string | undefined;\n      if (code === 'auth/popup-blocked' || code === 'auth/popup-closed-by-user') {\n        try {\n          await signInWithRedirect(auth, provider);\n          return { ok: true };\n        } catch (e2: any) {\n          return { ok: false, code: e2?.code, message: e2?.message };\n        }\n      }\n      if (code === 'auth/account-exists-with-different-credential') {\n        const email = e?.customData?.email as string | undefined;\n        const cred = GoogleAuthProvider.credentialFromError?.(e);\n        if (email && cred) {\n          pendingAccountLink = { email, credential: cred };\n          try {\n            const methods = await fetchSignInMethodsForEmail(auth, email);\n            if (methods.includes('password')) {\n              return { ok: false, code: 'link-with-password', message: 'Email already used. Sign in with your password to link Google.' };\n            }\n            return { ok: false, code: 'link-with-' + (methods[0] || 'existing'), message: 'Email already used. Sign in with your existing method to link.' };\n          } catch {}\n        }\n      }\n      return { ok: false, code, message: e?.message };\n    }\n  };\n\n  const signup = async (email: string, password: string, name: string): Promise<boolean> => {\n    try {\n      const cred = await createUserWithEmailAndPassword(auth, email, password);\n      if (auth.currentUser) {\n        try { await updateProfile(auth.currentUser, { displayName: name }); } catch {}\n      }\n      const profile: User = {\n        id: cred.user.uid,\n        email,\n        name,\n        avatar: null,\n        joinedDate: new Date().toISOString().split('T')[0],\n        isSeller: false,\n      };\n      await setDoc(doc(db, USERS_COLLECTION, cred.user.uid), stripUndefined(profile), { merge: true });\n      try { await clearOldUserData(cred.user.uid); } catch {}\n      setUser(profile);\n      setOrders([]);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  const logout = async () => {\n    await signOut(auth);\n    setUser(null);\n    setOrders([]);\n  };\n\n  const addOrder = async (orderData: Omit<Order, 'id' | 'date'>) => {\n    const newOrder: Order = {\n      ...orderData,\n      id: `ORD-${Date.now()}`,\n      date: new Date().toISOString().split('T')[0],\n    };\n    setOrders((prev) => [newOrder, ...prev]);\n    if (user) {\n      try {\n        await addDoc(collection(db, USERS_COLLECTION, user.id, USER_ORDERS_SUB), stripUndefined({\n          ...newOrder,\n          createdAt: serverTimestamp(),\n        }));\n      } catch {}\n    }\n  };\n\n  const updateUserProfile = async (updates: Partial<Pick<User, 'name' | 'email' | 'avatar'>>) => {\n    if (user) {\n      const next = { ...user, ...updates } as User;\n      setUser(next);\n      try {\n        await setDoc(doc(db, USERS_COLLECTION, user.id), stripUndefined(updates), { merge: true });\n      } catch {}\n    }\n  };\n\n  return (\n    <UserContext.Provider value={{\n      user,\n      orders,\n      login,\n      loginWithGoogle,\n      signup,\n      logout,\n      addOrder,\n      updateUserProfile,\n    }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n\nexport function useUser() {\n  const context = useContext(UserContext);\n  if (context === undefined) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}